#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
G4F Python —Å–µ—Ä–≤–µ—Ä –¥–ª—è Node.js –±–æ—Ç–∞
–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ g4f –∏–∑ Node.js
"""

from flask import Flask, request, jsonify
import g4f
import traceback
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ)
PROVIDERS = [
    g4f.Provider.Bing,
    g4f.Provider.You,
    g4f.Provider.ChatgptFree,
    g4f.Provider.FreeGpt,
    g4f.Provider.OpenaiChat,
    g4f.Provider.ChatgptAi,
    g4f.Provider.Aichat,
    g4f.Provider.ChatForAi,
]

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "ok", "service": "g4f-server"})

@app.route('/chat', methods=['POST'])
def chat_completion():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ g4f"""
    try:
        data = request.get_json()
        
        if not data or 'prompt' not in data:
            return jsonify({"error": "Prompt is required"}), 400
            
        prompt = data['prompt']
        model = data.get('model', 'gpt-4')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {prompt[:100]}...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        for provider in PROVIDERS:
            try:
                logger.info(f"–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.__name__}")
                
                response = g4f.ChatCompletion.create(
                    model=model,
                    messages=[{"role": "user", "content": prompt}],
                    provider=provider,
                    timeout=60
                )
                
                if response and response.strip():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {provider.__name__}")
                    return jsonify({
                        "success": True,
                        "response": response,
                        "provider": provider.__name__
                    })
                else:
                    logger.warning(f"‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {provider.__name__}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider.__name__}: {str(e)}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        return jsonify({
            "success": False,
            "error": "–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        }), 503
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/providers', methods=['GET'])
def list_providers():
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    provider_status = []
    
    for provider in PROVIDERS:
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            status = "unknown"
            provider_status.append({
                "name": provider.__name__,
                "status": status
            })
        except Exception as e:
            provider_status.append({
                "name": provider.__name__,
                "status": "error",
                "error": str(e)
            })
    
    return jsonify({"providers": provider_status})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ G4F Python —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì° API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5000")
    print("üîç Endpoints:")
    print("  - GET  /health     - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print("  - POST /chat       - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
    print("  - GET  /providers  - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    app.run(host='0.0.0.0', port=5000, debug=False)