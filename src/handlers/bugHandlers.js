// Bug Handlers - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥—Ä–µ–ø–æ—Ä—Ç–æ–≤

const Sheets = require("../api/sheets");
const Validation = require("../services/validation");
const userStorage = require("../services/userStorage");
const ProjectManager = require("../services/projectManager");
const gptService = require("../services/gptService");
const worksectionService = require("../services/worksectionService");
const { BASE_PROMPT } = require("../config/prompt");

class BugHandlers {
  constructor() {
    userStorage.initStorage();
  }

  async initializeUser(userId) {
    const credentials = await userStorage.getCredentials(userId);

    if (credentials && !userStorage.isExpired(credentials.savedAt)) {
      return { hasCredentials: true, expired: false };
    } else {
      if (credentials) {
        await userStorage.clearCredentials(userId);
      }
      return { hasCredentials: false, expired: credentials ? true : false };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  async saveCredentials(userId, email, password) {
    if (!Validation.validateEmail(email)) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å");
    }

    if (!Validation.validatePassword(password)) {
      throw new Error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
    }

    await userStorage.saveCredentials(userId, email, password);
    return true;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserProjects(userId) {
    const projectManager = new ProjectManager(userId);
    const projects = await projectManager.getAllProjects();
    return projects;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
  async addProject(userId, name, url) {
    if (!name || !url) {
      throw new Error("–ù–∞–∑–≤–∞–Ω–∏–µ –∏ URL –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    if (!Validation.validateUrl(url)) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –ø—Ä–æ–µ–∫—Ç–∞");
    }

    const projectManager = new ProjectManager(userId);
    const projectId = await projectManager.addNewProject(name, url);
    return projectId;
  }

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
  async deleteProject(userId, projectId) {
    const projectManager = new ProjectManager(userId);
    return await projectManager.deleteProject(projectId);
  }

  // –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
  async selectProject(userId, projectId) {
    const projectManager = new ProjectManager(userId);
    return await projectManager.selectProject(projectId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
  async getSelectedProject(userId) {
    const projectManager = new ProjectManager(userId);
    return await projectManager.getSelectedProject();
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å Google Sheets
  async scanGoogleSheets(sheetUrl, resultColumn) {
    if (!sheetUrl) {
      throw new Error("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É!");
    }

    const SPREADSHEET_ID = Validation.extractSpreadsheetId(sheetUrl);
    const GID = Validation.extractGid(sheetUrl);

    if (!SPREADSHEET_ID) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É!");
    }

    if (!resultColumn) {
      throw new Error("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, C)!");
    }

    if (!/^[A-Z]$/.test(resultColumn.toUpperCase())) {
      throw new Error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü: –æ–¥–Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞!");
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –ø–æ GID
      const sheetName = await Sheets.getSheetNameByGid(SPREADSHEET_ID, GID);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const allRows = await Sheets.fetchAllDataFromSheet(
        SPREADSHEET_ID,
        sheetName
      );

      const columnIndex = resultColumn.toUpperCase().charCodeAt(0) - 65;

      const columnValues = allRows
        .slice(1) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        .map((row) => row[columnIndex])
        .filter((v) => v);

      Validation.validateColumnValues(columnValues);

      const uniqueValues = [...new Set(columnValues)];

      return {
        allRows,
        uniqueValues,
        columnIndex,
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`);
    }
  }

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
  filterRows(allRows, selectedValues, columnIndex) {
    if (!selectedValues || selectedValues.length === 0) {
      throw new Error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ!");
    }

    const filteredRows = allRows.filter(
      (row, rowIndex) =>
        rowIndex > 0 && // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        selectedValues.includes(row[columnIndex])
    );

    if (filteredRows.length === 0) {
      throw new Error("–ù–µ—Ç —Å—Ç—Ä–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.");
    }

    return filteredRows.map((row) => row.join(" | "));
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω
  async checkProjectSelected(userId) {
    const selectedProject = await this.getSelectedProject(userId);

    if (!selectedProject) {
      throw new Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º!");
    }

    return selectedProject;
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –±–∞–≥ —á–µ—Ä–µ–∑ GPT
  async processSingleBug(userId, bugDescription, basePrompt) {
    if (!bugDescription || !bugDescription.trim()) {
      throw new Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞.");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    const selectedProject = await this.checkProjectSelected(userId);

    try {
      const formattedPrompt = `${
        basePrompt || BASE_PROMPT
      }\n\n–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞:\n${bugDescription.trim()}`;

      // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ GPT —Å–µ—Ä–≤–∏—Å–∞
      const response = await gptService.sendToChatGPT(formattedPrompt);

      if (!response || !Array.isArray(response) || response.length === 0) {
        throw new Error("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç");
      }

      const bugData = {
        title: response[0].title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
        description: response[0].description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        steps: response[0].steps || "–ù–µ—Ç —à–∞–≥–æ–≤",
        expected: response[0].expected || "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω",
        actual: response[0].actual || "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω",
        environment: response[0].environment || "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
      };

      return {
        bug: bugData,
        project: selectedProject,
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–≥–∞ —á–µ—Ä–µ–∑ GPT: ${error.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–≥–∏ –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞
  async processChecklistBugs(userId, checklistData, basePrompt) {
    if (!checklistData || !checklistData.trim()) {
      throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥–æ–≤!");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    const selectedProject = await this.checkProjectSelected(userId);

    const bugItems = checklistData
      .split("---")
      .map((item) => item.trim())
      .filter(Boolean);

    console.log(`–í—Å–µ–≥–æ –±–∞–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${bugItems.length}`);

    const processedBugs = [];

    for (let i = 0; i < bugItems.length; i++) {
      const item = bugItems[i];
      try {
        const formattedPrompt = `${basePrompt || BASE_PROMPT}\n\n–≠–ª–µ–º–µ–Ω—Ç #${
          i + 1
        }:\n${item}`;

        console.log(
          `–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT (${i + 1}/${bugItems.length}):`,
          formattedPrompt
        );

        // –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ GPT —Å–µ—Ä–≤–∏—Å–∞
        const response = await gptService.sendToChatGPT(formattedPrompt);

        if (!response || !Array.isArray(response) || response.length === 0) {
          throw new Error("GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç");
        }

        response.forEach((bugData, index) => {
          processedBugs.push({
            index: processedBugs.length + 1,
            title: bugData.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            description: bugData.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
            steps: bugData.steps || "–ù–µ—Ç —à–∞–≥–æ–≤",
            expected: bugData.expected || "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω",
            actual: bugData.actual || "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω",
            environment: bugData.environment || "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
          });
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–≥–∞ #${i + 1}:`, error.message);
      }
    }

    return {
      bugs: processedBugs,
      project: selectedProject,
    };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatBugReport(bug) {
    return (
      `üêõ **${bug.title}**\n\n` +
      `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n${bug.description}\n\n` +
      `üîÑ **–®–∞–≥–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:**\n${bug.steps}\n\n` +
      `‚úÖ **–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n${bug.expected}\n\n` +
      `‚ùå **–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n${bug.actual}\n\n` +
      `üñ•Ô∏è **–¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:**\n${bug.environment}`
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection
  async getWorksectionProjects(userId) {
    try {
      const credentials = await userStorage.getCredentials(userId);
      if (!credentials) {
        throw new Error("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      console.log("–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Worksection...");
      const projects = await worksectionService.getAvailableProjects(
        credentials.email,
        credentials.password
      );

      return projects;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Worksection:", error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã: ${error.message}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –±–∞–≥ –≤ Worksection
  async sendBugToWorksection(userId, bug) {
    try {
      const credentials = await userStorage.getCredentials(userId);
      if (!credentials) {
        throw new Error("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      const selectedProject = await this.getSelectedProject(userId);
      if (!selectedProject) {
        throw new Error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
      }

      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–≥ –≤ Worksection...");
      await worksectionService.createMultipleBugs(
        credentials.email,
        credentials.password,
        selectedProject.url,
        [bug]
      );

      return { success: true, project: selectedProject };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–≥–∞ –≤ Worksection:", error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥: ${error.message}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–≥–∏ –≤ Worksection
  async sendBugsToWorksection(userId, bugs) {
    try {
      const credentials = await userStorage.getCredentials(userId);
      if (!credentials) {
        throw new Error("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }

      const selectedProject = await this.getSelectedProject(userId);
      if (!selectedProject) {
        throw new Error("–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
      }

      console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${bugs.length} –±–∞–≥–æ–≤ –≤ Worksection...`);
      const result = await worksectionService.createMultipleBugs(
        credentials.email,
        credentials.password,
        selectedProject.url,
        bugs
      );

      return {
        success: true,
        created: result.created,
        project: selectedProject,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–≥–æ–≤ –≤ Worksection:", error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥–∏: ${error.message}`);
    }
  }
}

module.exports = new BugHandlers();
