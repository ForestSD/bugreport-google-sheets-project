const bugHandlers = require("./bugHandlers");
const InlineKeyboards = require("../keyboards/inlineKeyboards");
const ProjectManager = require("../services/projectManager");
const userStorage = require("../services/userStorage");

class TelegramHandlers {
  constructor() {
    // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.userStates = new Map();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserState(userId) {
    return this.userStates.get(userId) || { step: "idle" };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setUserState(userId, state) {
    this.userStates.set(userId, state);
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  async startCommand(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userInfo = await bugHandlers.initializeUser(userId);

      if (!userInfo.hasCredentials) {
        await bot.sendMessage(
          chatId,
          "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bug Report Bot!\n\n" +
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Worksection.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcredentials –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç—ã
      const projects = await bugHandlers.getUserProjects(userId);

      if (Object.keys(projects).length === 0) {
        await bot.sendMessage(
          chatId,
          "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n" +
            "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addproject —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç."
        );
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
      await this.showProjectsMenu(bot, chatId, userId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ startCommand:", error);
      await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.");
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /setcredentials
  async setCredentialsCommand(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    this.setUserState(userId, { step: "waiting_email" });

    await bot.sendMessage(
      chatId,
      "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n" + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è Worksection:"
    );
  }

  // –ö–æ–º–∞–Ω–¥–∞ /addproject
  async addProjectCommand(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    this.setUserState(userId, { step: "waiting_project_name" });

    await bot.sendMessage(
      chatId,
      "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n" + "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
    );
  }

  // –ö–æ–º–∞–Ω–¥–∞ /projects
  async projectsCommand(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;

    await this.showProjectsMenu(bot, chatId, userId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
  async showProjectsMenu(bot, chatId, userId) {
    try {
      const projects = await bugHandlers.getUserProjects(userId);

      if (Object.keys(projects).length === 0) {
        await bot.sendMessage(
          chatId,
          "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addproject —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç.",
          InlineKeyboards.getBackMenu("start")
        );
        return;
      }

      await bot.sendMessage(
        chatId,
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
        InlineKeyboards.getProjectsMenu(projects)
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
      await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.");
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async showMainMenu(bot, chatId, userId) {
    try {
      const selectedProject = await bugHandlers.getSelectedProject(userId);

      if (!selectedProject) {
        await this.showProjectsMenu(bot, chatId, userId);
        return;
      }

      await bot.sendMessage(
        chatId,
        `üöÄ –ü—Ä–æ–µ–∫—Ç: *${selectedProject.name}*\n\n` + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          parse_mode: "Markdown",
          ...InlineKeyboards.getMainMenu(),
        }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ showMainMenu:", error);
      await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.");
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(bot, msg) {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const text = msg.text;
    const state = this.getUserState(userId);

    console.log(
      `üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state.step}, —Ç–µ–∫—Å—Ç: "${text}"`
    );

    try {
      switch (state.step) {
        case "waiting_email":
          this.setUserState(userId, { step: "waiting_password", email: text });
          await bot.sendMessage(chatId, "üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
          break;

        case "waiting_password":
          try {
            await bugHandlers.saveCredentials(userId, state.email, text);
            this.setUserState(userId, { step: "idle" });
            await bot.sendMessage(chatId, "‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
            await this.showProjectsMenu(bot, chatId, userId);
          } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            this.setUserState(userId, { step: "waiting_email" });
            await bot.sendMessage(chatId, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ email:");
          }
          break;

        case "waiting_project_name":
          this.setUserState(userId, {
            step: "waiting_project_url",
            projectName: text,
          });
          await bot.sendMessage(
            chatId,
            `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${text}\n\n` +
              "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ–µ–∫—Ç–∞ Worksection:"
          );
          break;

        case "waiting_project_url":
          try {
            const projectId = await bugHandlers.addProject(
              userId,
              state.projectName,
              text
            );
            this.setUserState(userId, { step: "idle" });
            await bot.sendMessage(
              chatId,
              `‚úÖ –ü—Ä–æ–µ–∫—Ç "${state.projectName}" –¥–æ–±–∞–≤–ª–µ–Ω!`
            );
            await this.showProjectsMenu(bot, chatId, userId);
          } catch (error) {
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            this.setUserState(userId, { step: "waiting_project_name" });
            await bot.sendMessage(
              chatId,
              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:"
            );
          }
          break;

        case "waiting_bug_description":
          await this.processSingleBug(bot, chatId, userId, text);
          break;

        case "waiting_sheets_url":
          this.setUserState(userId, {
            step: "waiting_result_column",
            sheetUrl: text,
          });
          await bot.sendMessage(
            chatId,
            "üìä –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É —Å—Ç–æ–ª–±—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: C):"
          );
          break;

        case "waiting_result_column":
          await this.processSheetsScan(
            bot,
            chatId,
            userId,
            state.sheetUrl,
            text
          );
          break;

        case "waiting_checklist_data":
          await this.processChecklistBugs(bot, chatId, userId, text);
          break;

        default:
          // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–≥
          console.log(`üîÑ Default –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          const userInfo = await bugHandlers.initializeUser(userId);
          console.log(
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: hasCredentials=${userInfo.hasCredentials}, selectedProject=${userInfo.selectedProject}`
          );

          if (userInfo.hasCredentials && userInfo.selectedProject) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤—ã–±—Ä–∞–ª –ø—Ä–æ–µ–∫—Ç - —Å–æ–∑–¥–∞–µ–º –±–∞–≥—Ä–µ–ø–æ—Ä—Ç
            console.log(
              `üêõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞: "${text}"`
            );
            await this.processSingleBug(bot, chatId, userId, text);
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            console.log(
              `‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É`
            );
            await bot.sendMessage(
              chatId,
              "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞:\n" +
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                "/projects - –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç\n" +
                "/addproject - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n" +
                "/setcredentials - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            );
          }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ handleMessage:", error);
      await bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
      );
      this.setUserState(userId, { step: "idle" });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –±–∞–≥–∞
  async processSingleBug(bot, chatId, userId, description) {
    try {
      await bot.sendMessage(chatId, "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç...");

      const result = await bugHandlers.processSingleBug(userId, description);
      const formattedBug = bugHandlers.formatBugReport(result.bug);

      this.setUserState(userId, {
        step: "idle",
        lastBug: result.bug,
      });

      await bot.sendMessage(chatId, formattedBug, {
        parse_mode: "Markdown",
        ...InlineKeyboards.getBugResultMenu(),
      });
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      this.setUserState(userId, { step: "idle" });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets
  async processSheetsScan(bot, chatId, userId, sheetUrl, resultColumn) {
    try {
      await bot.sendMessage(chatId, "üìä –°–∫–∞–Ω–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É...");

      const scanResult = await bugHandlers.scanGoogleSheets(
        sheetUrl,
        resultColumn
      );

      this.setUserState(userId, {
        step: "selecting_values",
        scanData: scanResult,
      });

      await bot.sendMessage(
        chatId,
        `üìã –ù–∞–π–¥–µ–Ω–æ ${scanResult.uniqueValues.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.\n\n` +
          "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        InlineKeyboards.getScanResultMenu(scanResult.uniqueValues)
      );
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      this.setUserState(userId, { step: "idle" });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
  async processChecklistBugs(bot, chatId, userId, checklistData) {
    try {
      await bot.sendMessage(chatId, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ–∫-–ª–∏—Å—Ç...");

      const result = await bugHandlers.processChecklistBugs(
        userId,
        checklistData
      );

      this.setUserState(userId, {
        step: "idle",
        lastBugs: result.bugs,
      });

      await bot.sendMessage(
        chatId,
        `‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${result.bugs.length} –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–æ–≤!\n\n` +
          `–ü—Ä–æ–µ–∫—Ç: ${result.project.name}`,
        InlineKeyboards.getMultipleBugsMenu(result.bugs.length)
      );
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      this.setUserState(userId, { step: "idle" });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (inline –∫–Ω–æ–ø–∫–∏)
  async handleCallbackQuery(bot, callbackQuery) {
    const userId = callbackQuery.from.id;
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
      await bot.answerCallbackQuery(callbackQuery.id);

      if (data.startsWith("select_project_")) {
        const projectId = data.replace("select_project_", "");
        await bugHandlers.selectProject(userId, projectId);
        await this.showMainMenu(bot, chatId, userId);
      } else if (data === "create_single_bug") {
        this.setUserState(userId, { step: "waiting_bug_description" });
        await bot.sendMessage(chatId, "üêõ –û–ø–∏—à–∏—Ç–µ –±–∞–≥:");
      } else if (data === "create_from_checklist") {
        this.setUserState(userId, { step: "waiting_checklist_data" });
        await bot.sendMessage(
          chatId,
          "üìã –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç–∞.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '---' –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤:"
        );
      } else if (data === "scan_sheets") {
        this.setUserState(userId, { step: "waiting_sheets_url" });
        await bot.sendMessage(chatId, "üìä –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets:");
      } else if (data === "settings") {
        await bot.sendMessage(
          chatId,
          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
          InlineKeyboards.getSettingsMenu()
        );
      } else if (data === "change_project" || data === "back_to_projects") {
        await this.showProjectsMenu(bot, chatId, userId);
      } else if (data === "back_to_main") {
        await this.showMainMenu(bot, chatId, userId);
      } else if (data === "add_project") {
        await this.addProjectCommand(bot, {
          from: { id: userId },
          chat: { id: chatId },
        });
      } else if (data === "change_credentials") {
        await this.setCredentialsCommand(bot, {
          from: { id: userId },
          chat: { id: chatId },
        });
      } else if (data === "send_to_worksection") {
        await this.handleSendToWorksection(bot, chatId, userId, "single");
      } else if (data === "send_all_to_worksection") {
        await this.handleSendToWorksection(bot, chatId, userId, "multiple");
      } else if (data === "copy_bug") {
        await this.handleCopyBug(bot, chatId, userId);
      } else if (data === "create_another_bug") {
        this.setUserState(userId, { step: "waiting_bug_description" });
        await bot.sendMessage(chatId, "üêõ –û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–≥:");
      }

      // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback'–æ–≤...
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ handleCallbackQuery:", error);
      await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Worksection
  async handleSendToWorksection(bot, chatId, userId, type) {
    try {
      const state = this.getUserState(userId);

      if (type === "single" && state.lastBug) {
        await bot.sendMessage(chatId, "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –±–∞–≥ –≤ Worksection...");

        const result = await bugHandlers.sendBugToWorksection(
          userId,
          state.lastBug
        );

        await bot.sendMessage(
          chatId,
          `‚úÖ –ë–∞–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç "${result.project.name}"!`
        );
      } else if (type === "multiple" && state.lastBugs) {
        await bot.sendMessage(
          chatId,
          `üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é ${state.lastBugs.length} –±–∞–≥–æ–≤ –≤ Worksection...`
        );

        const result = await bugHandlers.sendBugsToWorksection(
          userId,
          state.lastBugs
        );

        await bot.sendMessage(
          chatId,
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${result.created} –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç "${result.project.name}"!`
        );
      } else {
        await bot.sendMessage(chatId, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.");
      }
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–≥–∞
  async handleCopyBug(bot, chatId, userId) {
    try {
      const state = this.getUserState(userId);

      if (state.lastBug) {
        const formattedBug = bugHandlers.formatBugReport(state.lastBug);

        await bot.sendMessage(
          chatId,
          "üìã –ë–∞–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n" + formattedBug,
          { parse_mode: "Markdown" }
        );
      } else {
        await bot.sendMessage(chatId, "‚ùå –ù–µ—Ç –±–∞–≥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.");
      }
    } catch (error) {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }
  }
}

module.exports = new TelegramHandlers();
